
CH5 Interrupt_GPIO_Toggle_R_G_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b30  08002b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000003c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000485e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011c8  00000000  00000000  000248fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e8  00000000  00000000  00025ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000440  00000000  00000000  00025fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e57  00000000  00000000  000263f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000059a2  00000000  00000000  00049247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0347  00000000  00000000  0004ebe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ef30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000199c  00000000  00000000  0011ef80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002a50 	.word	0x08002a50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08002a50 	.word	0x08002a50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function needed to use printf()
int _write(int file, char *ptr, int len){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	  int i = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
	  for (i=0; i<len; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x2a>
		  ITM_SendChar((*ptr++));
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffc7 	bl	8000594 <ITM_SendChar>
	  for (i=0; i<len; i++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x16>
	  return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fa38 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f824 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f88e 	bl	800074c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <main+0x48>)
 8000638:	f000 fd9a 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <main+0x48>)
 8000644:	f000 fd94 	bl	8001170 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter1++;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <main+0x4c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <main+0x4c>)
 8000650:	6013      	str	r3, [r2, #0]
	  printf("Counter 1 value is: %d\n", counter1);
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <main+0x4c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <main+0x50>)
 800065a:	f001 fa6b 	bl	8001b34 <iprintf>
	  HAL_Delay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000662:	f000 fa8b 	bl	8000b7c <HAL_Delay>
	  counter1++;
 8000666:	e7ef      	b.n	8000648 <main+0x28>
 8000668:	40021800 	.word	0x40021800
 800066c:	2000008c 	.word	0x2000008c
 8000670:	08002a68 	.word	0x08002a68

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fa4e 	bl	8001b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <SystemClock_Config+0xd0>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd4>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006ec:	2332      	movs	r3, #50	; 0x32
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fd83 	bl	8001208 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000708:	f000 f8a4 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000718:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ffe4 	bl	80016f8 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000736:	f000 f88d 	bl	8000854 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0xac>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xac>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_GPIO_Init+0xac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xac>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_GPIO_Init+0xac>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_GPIO_Init+0xac>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007a0:	4816      	ldr	r0, [pc, #88]	; (80007fc <MX_GPIO_Init+0xb0>)
 80007a2:	f000 fce5 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b0:	2302      	movs	r3, #2
 80007b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007bc:	f000 fb14 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007c0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <MX_GPIO_Init+0xb0>)
 80007da:	f000 fb05 	bl	8000de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2006      	movs	r0, #6
 80007e4:	f000 fac9 	bl	8000d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007e8:	2006      	movs	r0, #6
 80007ea:	f000 fae2 	bl	8000db2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021800 	.word	0x40021800
 8000800:	40020000 	.word	0x40020000

08000804 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800080e:	2101      	movs	r1, #1
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <HAL_GPIO_EXTI_Callback+0x44>)
 8000812:	f000 fc95 	bl	8001140 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	b29b      	uxth	r3, r3
 800081a:	88fa      	ldrh	r2, [r7, #6]
 800081c:	429a      	cmp	r2, r3
 800081e:	d109      	bne.n	8000834 <HAL_GPIO_EXTI_Callback+0x30>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <HAL_GPIO_EXTI_Callback+0x48>)
 8000826:	f000 fcbc 	bl	80011a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800082a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <HAL_GPIO_EXTI_Callback+0x48>)
 8000830:	f000 fcb7 	bl	80011a2 <HAL_GPIO_TogglePin>
	}
	counter2++;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <HAL_GPIO_EXTI_Callback+0x4c>)
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40020000 	.word	0x40020000
 800084c:	40021800 	.word	0x40021800
 8000850:	20000090 	.word	0x20000090

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fa60 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f91e 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fc65 	bl	80011d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e00a      	b.n	800093a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000924:	f3af 8000 	nop.w
 8000928:	4601      	mov	r1, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	60ba      	str	r2, [r7, #8]
 8000930:	b2ca      	uxtb	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf0      	blt.n	8000924 <_read+0x12>
  }

  return len;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <_close>:
  }
  return len;
}

int _close(int file)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000974:	605a      	str	r2, [r3, #4]
  return 0;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_isatty>:

int _isatty(int file)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800098c:	2301      	movs	r3, #1
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f001 f874 	bl	8001ad0 <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20030000 	.word	0x20030000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	200000b0 	.word	0x200000b0

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f001 f833 	bl	8001adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fdd3 	bl	8000620 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a88:	08002b38 	.word	0x08002b38
  ldr r2, =_sbss
 8000a8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a90:	200000ac 	.word	0x200000ac

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f94f 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fec8 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f967 	bl	8000dce <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f92f 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000098 	.word	0x20000098

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000098 	.word	0x20000098

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff ffee 	bl	8000b64 <HAL_GetTick>
 8000b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ffde 	bl	8000b64 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e177      	b.n	80010f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8166 	bne.w	80010ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80c0 	beq.w	80010ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b66      	ldr	r3, [pc, #408]	; (800110c <HAL_GPIO_Init+0x324>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a65      	ldr	r2, [pc, #404]	; (800110c <HAL_GPIO_Init+0x324>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b63      	ldr	r3, [pc, #396]	; (800110c <HAL_GPIO_Init+0x324>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a61      	ldr	r2, [pc, #388]	; (8001110 <HAL_GPIO_Init+0x328>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a58      	ldr	r2, [pc, #352]	; (8001114 <HAL_GPIO_Init+0x32c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d037      	beq.n	8001026 <HAL_GPIO_Init+0x23e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a57      	ldr	r2, [pc, #348]	; (8001118 <HAL_GPIO_Init+0x330>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d031      	beq.n	8001022 <HAL_GPIO_Init+0x23a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a56      	ldr	r2, [pc, #344]	; (800111c <HAL_GPIO_Init+0x334>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02b      	beq.n	800101e <HAL_GPIO_Init+0x236>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a55      	ldr	r2, [pc, #340]	; (8001120 <HAL_GPIO_Init+0x338>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d025      	beq.n	800101a <HAL_GPIO_Init+0x232>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a54      	ldr	r2, [pc, #336]	; (8001124 <HAL_GPIO_Init+0x33c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01f      	beq.n	8001016 <HAL_GPIO_Init+0x22e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a53      	ldr	r2, [pc, #332]	; (8001128 <HAL_GPIO_Init+0x340>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x22a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	; (800112c <HAL_GPIO_Init+0x344>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	; (8001130 <HAL_GPIO_Init+0x348>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a50      	ldr	r2, [pc, #320]	; (8001134 <HAL_GPIO_Init+0x34c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x350>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x21a>
 8000ffe:	2309      	movs	r3, #9
 8001000:	e012      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001002:	230a      	movs	r3, #10
 8001004:	e010      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001006:	2308      	movs	r3, #8
 8001008:	e00e      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800100a:	2307      	movs	r3, #7
 800100c:	e00c      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800100e:	2306      	movs	r3, #6
 8001010:	e00a      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001012:	2305      	movs	r3, #5
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001016:	2304      	movs	r3, #4
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x240>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x240>
 8001026:	2300      	movs	r3, #0
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001038:	4935      	ldr	r1, [pc, #212]	; (8001110 <HAL_GPIO_Init+0x328>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b3d      	ldr	r3, [pc, #244]	; (800113c <HAL_GPIO_Init+0x354>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a34      	ldr	r2, [pc, #208]	; (800113c <HAL_GPIO_Init+0x354>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <HAL_GPIO_Init+0x354>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <HAL_GPIO_Init+0x354>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <HAL_GPIO_Init+0x354>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_GPIO_Init+0x354>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_GPIO_Init+0x354>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <HAL_GPIO_Init+0x354>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	f67f ae84 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40013800 	.word	0x40013800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40021000 	.word	0x40021000
 8001128:	40021400 	.word	0x40021400
 800112c:	40021800 	.word	0x40021800
 8001130:	40021c00 	.word	0x40021c00
 8001134:	40022000 	.word	0x40022000
 8001138:	40022400 	.word	0x40022400
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e001      	b.n	8001162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b4:	887a      	ldrh	r2, [r7, #2]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	041a      	lsls	r2, r3, #16
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43d9      	mvns	r1, r3
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	400b      	ands	r3, r1
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb04 	bl	8000804 <HAL_GPIO_EXTI_Callback>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e267      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b85      	ldr	r3, [pc, #532]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e242      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a75      	ldr	r2, [pc, #468]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b70      	ldr	r3, [pc, #448]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6f      	ldr	r2, [pc, #444]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6c      	ldr	r2, [pc, #432]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc50 	bl	8000b64 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc4c 	bl	8000b64 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e207      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc3c 	bl	8000b64 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc38 	bl	8000b64 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1f3      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c7      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x244>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fbf1 	bl	8000b64 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fbed 	bl	8000b64 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a8      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4925      	ldr	r1, [pc, #148]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x244>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbd0 	bl	8000b64 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbcc 	bl	8000b64 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e187      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d036      	beq.n	8001460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_RCC_OscConfig+0x248>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fbb0 	bl	8000b64 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fbac 	bl	8000b64 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e167      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x240>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
 8001426:	e01b      	b.n	8001460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x248>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb99 	bl	8000b64 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e00e      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fb95 	bl	8000b64 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d907      	bls.n	8001454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e150      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001448:	40023800 	.word	0x40023800
 800144c:	42470000 	.word	0x42470000
 8001450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ea      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8097 	beq.w	800159c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a7c      	ldr	r2, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b77      	ldr	r3, [pc, #476]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a73      	ldr	r2, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb55 	bl	8000b64 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fb51 	bl	8000b64 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e10c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x474>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2ea>
 80014e4:	4b64      	ldr	r3, [pc, #400]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a63      	ldr	r2, [pc, #396]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x30c>
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0x324>
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a57      	ldr	r2, [pc, #348]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	4b55      	ldr	r3, [pc, #340]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001526:	f023 0304 	bic.w	r3, r3, #4
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fb16 	bl	8000b64 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fb12 	bl	8000b64 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0cb      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0ee      	beq.n	800153c <HAL_RCC_OscConfig+0x334>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb00 	bl	8000b64 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fafc 	bl	8000b64 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0b5      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ee      	bne.n	8001568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a38      	ldr	r2, [pc, #224]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a1 	beq.w	80016e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d05c      	beq.n	800166c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d141      	bne.n	800163e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fad0 	bl	8000b64 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff facc 	bl	8000b64 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e087      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faa5 	bl	8000b64 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff faa1 	bl	8000b64 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e05c      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x416>
 800163c:	e054      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa8e 	bl	8000b64 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fa8a 	bl	8000b64 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e045      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x444>
 800166a:	e03d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e038      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000
 8001680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d028      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d121      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d11a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	4293      	cmp	r3, r2
 80016be:	d111      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff f9bc 	bl	8000b64 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff f9b8 	bl	8000b64 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f91c 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	08002a80 	.word	0x08002a80
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c8:	b094      	sub	sp, #80	; 0x50
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d4:	2300      	movs	r3, #0
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d00d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f200 80e1 	bhi.w	8001ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018f6:	e0db      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018fc:	e0db      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_GetSysClockFreq+0x208>)
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001902:	e0d8      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d063      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	2200      	movs	r2, #0
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
 8001924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001936:	4622      	mov	r2, r4
 8001938:	462b      	mov	r3, r5
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4621      	mov	r1, r4
 8001950:	1a51      	subs	r1, r2, r1
 8001952:	6139      	str	r1, [r7, #16]
 8001954:	4629      	mov	r1, r5
 8001956:	eb63 0301 	sbc.w	r3, r3, r1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001968:	4659      	mov	r1, fp
 800196a:	018b      	lsls	r3, r1, #6
 800196c:	4651      	mov	r1, sl
 800196e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001972:	4651      	mov	r1, sl
 8001974:	018a      	lsls	r2, r1, #6
 8001976:	4651      	mov	r1, sl
 8001978:	ebb2 0801 	subs.w	r8, r2, r1
 800197c:	4659      	mov	r1, fp
 800197e:	eb63 0901 	sbc.w	r9, r3, r1
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	4623      	mov	r3, r4
 800199c:	eb18 0303 	adds.w	r3, r8, r3
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	462b      	mov	r3, r5
 80019a4:	eb49 0303 	adc.w	r3, r9, r3
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019b6:	4629      	mov	r1, r5
 80019b8:	024b      	lsls	r3, r1, #9
 80019ba:	4621      	mov	r1, r4
 80019bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c0:	4621      	mov	r1, r4
 80019c2:	024a      	lsls	r2, r1, #9
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ca:	2200      	movs	r2, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019d4:	f7fe fc5c 	bl	8000290 <__aeabi_uldivmod>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4613      	mov	r3, r2
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e0:	e058      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	4611      	mov	r1, r2
 80019ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019fc:	4642      	mov	r2, r8
 80019fe:	464b      	mov	r3, r9
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	0159      	lsls	r1, r3, #5
 8001a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0e:	0150      	lsls	r0, r2, #5
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4641      	mov	r1, r8
 8001a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a34:	ebb2 040a 	subs.w	r4, r2, sl
 8001a38:	eb63 050b 	sbc.w	r5, r3, fp
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	00eb      	lsls	r3, r5, #3
 8001a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4a:	00e2      	lsls	r2, r4, #3
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4643      	mov	r3, r8
 8001a52:	18e3      	adds	r3, r4, r3
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	464b      	mov	r3, r9
 8001a58:	eb45 0303 	adc.w	r3, r5, r3
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	028b      	lsls	r3, r1, #10
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a74:	4621      	mov	r1, r4
 8001a76:	028a      	lsls	r2, r1, #10
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	61fa      	str	r2, [r7, #28]
 8001a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a88:	f7fe fc02 	bl	8000290 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aae:	e002      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <__errno>:
 8001ad0:	4b01      	ldr	r3, [pc, #4]	; (8001ad8 <__errno+0x8>)
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <__libc_init_array>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	4d0d      	ldr	r5, [pc, #52]	; (8001b14 <__libc_init_array+0x38>)
 8001ae0:	4c0d      	ldr	r4, [pc, #52]	; (8001b18 <__libc_init_array+0x3c>)
 8001ae2:	1b64      	subs	r4, r4, r5
 8001ae4:	10a4      	asrs	r4, r4, #2
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	42a6      	cmp	r6, r4
 8001aea:	d109      	bne.n	8001b00 <__libc_init_array+0x24>
 8001aec:	4d0b      	ldr	r5, [pc, #44]	; (8001b1c <__libc_init_array+0x40>)
 8001aee:	4c0c      	ldr	r4, [pc, #48]	; (8001b20 <__libc_init_array+0x44>)
 8001af0:	f000 ffae 	bl	8002a50 <_init>
 8001af4:	1b64      	subs	r4, r4, r5
 8001af6:	10a4      	asrs	r4, r4, #2
 8001af8:	2600      	movs	r6, #0
 8001afa:	42a6      	cmp	r6, r4
 8001afc:	d105      	bne.n	8001b0a <__libc_init_array+0x2e>
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b04:	4798      	blx	r3
 8001b06:	3601      	adds	r6, #1
 8001b08:	e7ee      	b.n	8001ae8 <__libc_init_array+0xc>
 8001b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b0e:	4798      	blx	r3
 8001b10:	3601      	adds	r6, #1
 8001b12:	e7f2      	b.n	8001afa <__libc_init_array+0x1e>
 8001b14:	08002b30 	.word	0x08002b30
 8001b18:	08002b30 	.word	0x08002b30
 8001b1c:	08002b30 	.word	0x08002b30
 8001b20:	08002b34 	.word	0x08002b34

08001b24 <memset>:
 8001b24:	4402      	add	r2, r0
 8001b26:	4603      	mov	r3, r0
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <memset+0xa>
 8001b2c:	4770      	bx	lr
 8001b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b32:	e7f9      	b.n	8001b28 <memset+0x4>

08001b34 <iprintf>:
 8001b34:	b40f      	push	{r0, r1, r2, r3}
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <iprintf+0x2c>)
 8001b38:	b513      	push	{r0, r1, r4, lr}
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	b124      	cbz	r4, 8001b48 <iprintf+0x14>
 8001b3e:	69a3      	ldr	r3, [r4, #24]
 8001b40:	b913      	cbnz	r3, 8001b48 <iprintf+0x14>
 8001b42:	4620      	mov	r0, r4
 8001b44:	f000 f866 	bl	8001c14 <__sinit>
 8001b48:	ab05      	add	r3, sp, #20
 8001b4a:	9a04      	ldr	r2, [sp, #16]
 8001b4c:	68a1      	ldr	r1, [r4, #8]
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	4620      	mov	r0, r4
 8001b52:	f000 f9bd 	bl	8001ed0 <_vfiprintf_r>
 8001b56:	b002      	add	sp, #8
 8001b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b5c:	b004      	add	sp, #16
 8001b5e:	4770      	bx	lr
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <std>:
 8001b64:	2300      	movs	r3, #0
 8001b66:	b510      	push	{r4, lr}
 8001b68:	4604      	mov	r4, r0
 8001b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b72:	6083      	str	r3, [r0, #8]
 8001b74:	8181      	strh	r1, [r0, #12]
 8001b76:	6643      	str	r3, [r0, #100]	; 0x64
 8001b78:	81c2      	strh	r2, [r0, #14]
 8001b7a:	6183      	str	r3, [r0, #24]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	2208      	movs	r2, #8
 8001b80:	305c      	adds	r0, #92	; 0x5c
 8001b82:	f7ff ffcf 	bl	8001b24 <memset>
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <std+0x38>)
 8001b88:	6263      	str	r3, [r4, #36]	; 0x24
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <std+0x3c>)
 8001b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <std+0x40>)
 8001b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <std+0x44>)
 8001b94:	6224      	str	r4, [r4, #32]
 8001b96:	6323      	str	r3, [r4, #48]	; 0x30
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08002479 	.word	0x08002479
 8001ba0:	0800249b 	.word	0x0800249b
 8001ba4:	080024d3 	.word	0x080024d3
 8001ba8:	080024f7 	.word	0x080024f7

08001bac <_cleanup_r>:
 8001bac:	4901      	ldr	r1, [pc, #4]	; (8001bb4 <_cleanup_r+0x8>)
 8001bae:	f000 b8af 	b.w	8001d10 <_fwalk_reent>
 8001bb2:	bf00      	nop
 8001bb4:	080027d1 	.word	0x080027d1

08001bb8 <__sfmoreglue>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	2268      	movs	r2, #104	; 0x68
 8001bbc:	1e4d      	subs	r5, r1, #1
 8001bbe:	4355      	muls	r5, r2
 8001bc0:	460e      	mov	r6, r1
 8001bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bc6:	f000 f8e5 	bl	8001d94 <_malloc_r>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	b140      	cbz	r0, 8001be0 <__sfmoreglue+0x28>
 8001bce:	2100      	movs	r1, #0
 8001bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8001bd4:	300c      	adds	r0, #12
 8001bd6:	60a0      	str	r0, [r4, #8]
 8001bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bdc:	f7ff ffa2 	bl	8001b24 <memset>
 8001be0:	4620      	mov	r0, r4
 8001be2:	bd70      	pop	{r4, r5, r6, pc}

08001be4 <__sfp_lock_acquire>:
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <__sfp_lock_acquire+0x8>)
 8001be6:	f000 b8b3 	b.w	8001d50 <__retarget_lock_acquire_recursive>
 8001bea:	bf00      	nop
 8001bec:	2000009d 	.word	0x2000009d

08001bf0 <__sfp_lock_release>:
 8001bf0:	4801      	ldr	r0, [pc, #4]	; (8001bf8 <__sfp_lock_release+0x8>)
 8001bf2:	f000 b8ae 	b.w	8001d52 <__retarget_lock_release_recursive>
 8001bf6:	bf00      	nop
 8001bf8:	2000009d 	.word	0x2000009d

08001bfc <__sinit_lock_acquire>:
 8001bfc:	4801      	ldr	r0, [pc, #4]	; (8001c04 <__sinit_lock_acquire+0x8>)
 8001bfe:	f000 b8a7 	b.w	8001d50 <__retarget_lock_acquire_recursive>
 8001c02:	bf00      	nop
 8001c04:	2000009e 	.word	0x2000009e

08001c08 <__sinit_lock_release>:
 8001c08:	4801      	ldr	r0, [pc, #4]	; (8001c10 <__sinit_lock_release+0x8>)
 8001c0a:	f000 b8a2 	b.w	8001d52 <__retarget_lock_release_recursive>
 8001c0e:	bf00      	nop
 8001c10:	2000009e 	.word	0x2000009e

08001c14 <__sinit>:
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4604      	mov	r4, r0
 8001c18:	f7ff fff0 	bl	8001bfc <__sinit_lock_acquire>
 8001c1c:	69a3      	ldr	r3, [r4, #24]
 8001c1e:	b11b      	cbz	r3, 8001c28 <__sinit+0x14>
 8001c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c24:	f7ff bff0 	b.w	8001c08 <__sinit_lock_release>
 8001c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <__sinit+0x68>)
 8001c30:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <__sinit+0x6c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c36:	42a3      	cmp	r3, r4
 8001c38:	bf04      	itt	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	61a3      	streq	r3, [r4, #24]
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f000 f820 	bl	8001c84 <__sfp>
 8001c44:	6060      	str	r0, [r4, #4]
 8001c46:	4620      	mov	r0, r4
 8001c48:	f000 f81c 	bl	8001c84 <__sfp>
 8001c4c:	60a0      	str	r0, [r4, #8]
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f000 f818 	bl	8001c84 <__sfp>
 8001c54:	2200      	movs	r2, #0
 8001c56:	60e0      	str	r0, [r4, #12]
 8001c58:	2104      	movs	r1, #4
 8001c5a:	6860      	ldr	r0, [r4, #4]
 8001c5c:	f7ff ff82 	bl	8001b64 <std>
 8001c60:	68a0      	ldr	r0, [r4, #8]
 8001c62:	2201      	movs	r2, #1
 8001c64:	2109      	movs	r1, #9
 8001c66:	f7ff ff7d 	bl	8001b64 <std>
 8001c6a:	68e0      	ldr	r0, [r4, #12]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	2112      	movs	r1, #18
 8001c70:	f7ff ff78 	bl	8001b64 <std>
 8001c74:	2301      	movs	r3, #1
 8001c76:	61a3      	str	r3, [r4, #24]
 8001c78:	e7d2      	b.n	8001c20 <__sinit+0xc>
 8001c7a:	bf00      	nop
 8001c7c:	08002a90 	.word	0x08002a90
 8001c80:	08001bad 	.word	0x08001bad

08001c84 <__sfp>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	4607      	mov	r7, r0
 8001c88:	f7ff ffac 	bl	8001be4 <__sfp_lock_acquire>
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <__sfp+0x84>)
 8001c8e:	681e      	ldr	r6, [r3, #0]
 8001c90:	69b3      	ldr	r3, [r6, #24]
 8001c92:	b913      	cbnz	r3, 8001c9a <__sfp+0x16>
 8001c94:	4630      	mov	r0, r6
 8001c96:	f7ff ffbd 	bl	8001c14 <__sinit>
 8001c9a:	3648      	adds	r6, #72	; 0x48
 8001c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	d503      	bpl.n	8001cac <__sfp+0x28>
 8001ca4:	6833      	ldr	r3, [r6, #0]
 8001ca6:	b30b      	cbz	r3, 8001cec <__sfp+0x68>
 8001ca8:	6836      	ldr	r6, [r6, #0]
 8001caa:	e7f7      	b.n	8001c9c <__sfp+0x18>
 8001cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cb0:	b9d5      	cbnz	r5, 8001ce8 <__sfp+0x64>
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <__sfp+0x88>)
 8001cb4:	60e3      	str	r3, [r4, #12]
 8001cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001cba:	6665      	str	r5, [r4, #100]	; 0x64
 8001cbc:	f000 f847 	bl	8001d4e <__retarget_lock_init_recursive>
 8001cc0:	f7ff ff96 	bl	8001bf0 <__sfp_lock_release>
 8001cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ccc:	6025      	str	r5, [r4, #0]
 8001cce:	61a5      	str	r5, [r4, #24]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cd8:	f7ff ff24 	bl	8001b24 <memset>
 8001cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce8:	3468      	adds	r4, #104	; 0x68
 8001cea:	e7d9      	b.n	8001ca0 <__sfp+0x1c>
 8001cec:	2104      	movs	r1, #4
 8001cee:	4638      	mov	r0, r7
 8001cf0:	f7ff ff62 	bl	8001bb8 <__sfmoreglue>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	6030      	str	r0, [r6, #0]
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d1d5      	bne.n	8001ca8 <__sfp+0x24>
 8001cfc:	f7ff ff78 	bl	8001bf0 <__sfp_lock_release>
 8001d00:	230c      	movs	r3, #12
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	e7ee      	b.n	8001ce4 <__sfp+0x60>
 8001d06:	bf00      	nop
 8001d08:	08002a90 	.word	0x08002a90
 8001d0c:	ffff0001 	.word	0xffff0001

08001d10 <_fwalk_reent>:
 8001d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d14:	4606      	mov	r6, r0
 8001d16:	4688      	mov	r8, r1
 8001d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d1c:	2700      	movs	r7, #0
 8001d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d22:	f1b9 0901 	subs.w	r9, r9, #1
 8001d26:	d505      	bpl.n	8001d34 <_fwalk_reent+0x24>
 8001d28:	6824      	ldr	r4, [r4, #0]
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d1f7      	bne.n	8001d1e <_fwalk_reent+0xe>
 8001d2e:	4638      	mov	r0, r7
 8001d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d34:	89ab      	ldrh	r3, [r5, #12]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d907      	bls.n	8001d4a <_fwalk_reent+0x3a>
 8001d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	d003      	beq.n	8001d4a <_fwalk_reent+0x3a>
 8001d42:	4629      	mov	r1, r5
 8001d44:	4630      	mov	r0, r6
 8001d46:	47c0      	blx	r8
 8001d48:	4307      	orrs	r7, r0
 8001d4a:	3568      	adds	r5, #104	; 0x68
 8001d4c:	e7e9      	b.n	8001d22 <_fwalk_reent+0x12>

08001d4e <__retarget_lock_init_recursive>:
 8001d4e:	4770      	bx	lr

08001d50 <__retarget_lock_acquire_recursive>:
 8001d50:	4770      	bx	lr

08001d52 <__retarget_lock_release_recursive>:
 8001d52:	4770      	bx	lr

08001d54 <sbrk_aligned>:
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	4e0e      	ldr	r6, [pc, #56]	; (8001d90 <sbrk_aligned+0x3c>)
 8001d58:	460c      	mov	r4, r1
 8001d5a:	6831      	ldr	r1, [r6, #0]
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	b911      	cbnz	r1, 8001d66 <sbrk_aligned+0x12>
 8001d60:	f000 fb7a 	bl	8002458 <_sbrk_r>
 8001d64:	6030      	str	r0, [r6, #0]
 8001d66:	4621      	mov	r1, r4
 8001d68:	4628      	mov	r0, r5
 8001d6a:	f000 fb75 	bl	8002458 <_sbrk_r>
 8001d6e:	1c43      	adds	r3, r0, #1
 8001d70:	d00a      	beq.n	8001d88 <sbrk_aligned+0x34>
 8001d72:	1cc4      	adds	r4, r0, #3
 8001d74:	f024 0403 	bic.w	r4, r4, #3
 8001d78:	42a0      	cmp	r0, r4
 8001d7a:	d007      	beq.n	8001d8c <sbrk_aligned+0x38>
 8001d7c:	1a21      	subs	r1, r4, r0
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 fb6a 	bl	8002458 <_sbrk_r>
 8001d84:	3001      	adds	r0, #1
 8001d86:	d101      	bne.n	8001d8c <sbrk_aligned+0x38>
 8001d88:	f04f 34ff 	mov.w	r4, #4294967295
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	200000a4 	.word	0x200000a4

08001d94 <_malloc_r>:
 8001d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d98:	1ccd      	adds	r5, r1, #3
 8001d9a:	f025 0503 	bic.w	r5, r5, #3
 8001d9e:	3508      	adds	r5, #8
 8001da0:	2d0c      	cmp	r5, #12
 8001da2:	bf38      	it	cc
 8001da4:	250c      	movcc	r5, #12
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	4607      	mov	r7, r0
 8001daa:	db01      	blt.n	8001db0 <_malloc_r+0x1c>
 8001dac:	42a9      	cmp	r1, r5
 8001dae:	d905      	bls.n	8001dbc <_malloc_r+0x28>
 8001db0:	230c      	movs	r3, #12
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	2600      	movs	r6, #0
 8001db6:	4630      	mov	r0, r6
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dbc:	4e2e      	ldr	r6, [pc, #184]	; (8001e78 <_malloc_r+0xe4>)
 8001dbe:	f000 fdbb 	bl	8002938 <__malloc_lock>
 8001dc2:	6833      	ldr	r3, [r6, #0]
 8001dc4:	461c      	mov	r4, r3
 8001dc6:	bb34      	cbnz	r4, 8001e16 <_malloc_r+0x82>
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4638      	mov	r0, r7
 8001dcc:	f7ff ffc2 	bl	8001d54 <sbrk_aligned>
 8001dd0:	1c43      	adds	r3, r0, #1
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	d14d      	bne.n	8001e72 <_malloc_r+0xde>
 8001dd6:	6834      	ldr	r4, [r6, #0]
 8001dd8:	4626      	mov	r6, r4
 8001dda:	2e00      	cmp	r6, #0
 8001ddc:	d140      	bne.n	8001e60 <_malloc_r+0xcc>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	4631      	mov	r1, r6
 8001de2:	4638      	mov	r0, r7
 8001de4:	eb04 0803 	add.w	r8, r4, r3
 8001de8:	f000 fb36 	bl	8002458 <_sbrk_r>
 8001dec:	4580      	cmp	r8, r0
 8001dee:	d13a      	bne.n	8001e66 <_malloc_r+0xd2>
 8001df0:	6821      	ldr	r1, [r4, #0]
 8001df2:	3503      	adds	r5, #3
 8001df4:	1a6d      	subs	r5, r5, r1
 8001df6:	f025 0503 	bic.w	r5, r5, #3
 8001dfa:	3508      	adds	r5, #8
 8001dfc:	2d0c      	cmp	r5, #12
 8001dfe:	bf38      	it	cc
 8001e00:	250c      	movcc	r5, #12
 8001e02:	4629      	mov	r1, r5
 8001e04:	4638      	mov	r0, r7
 8001e06:	f7ff ffa5 	bl	8001d54 <sbrk_aligned>
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	d02b      	beq.n	8001e66 <_malloc_r+0xd2>
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	442b      	add	r3, r5
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	e00e      	b.n	8001e34 <_malloc_r+0xa0>
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	1b52      	subs	r2, r2, r5
 8001e1a:	d41e      	bmi.n	8001e5a <_malloc_r+0xc6>
 8001e1c:	2a0b      	cmp	r2, #11
 8001e1e:	d916      	bls.n	8001e4e <_malloc_r+0xba>
 8001e20:	1961      	adds	r1, r4, r5
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	6025      	str	r5, [r4, #0]
 8001e26:	bf18      	it	ne
 8001e28:	6059      	strne	r1, [r3, #4]
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	bf08      	it	eq
 8001e2e:	6031      	streq	r1, [r6, #0]
 8001e30:	5162      	str	r2, [r4, r5]
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	4638      	mov	r0, r7
 8001e36:	f104 060b 	add.w	r6, r4, #11
 8001e3a:	f000 fd83 	bl	8002944 <__malloc_unlock>
 8001e3e:	f026 0607 	bic.w	r6, r6, #7
 8001e42:	1d23      	adds	r3, r4, #4
 8001e44:	1af2      	subs	r2, r6, r3
 8001e46:	d0b6      	beq.n	8001db6 <_malloc_r+0x22>
 8001e48:	1b9b      	subs	r3, r3, r6
 8001e4a:	50a3      	str	r3, [r4, r2]
 8001e4c:	e7b3      	b.n	8001db6 <_malloc_r+0x22>
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	42a3      	cmp	r3, r4
 8001e52:	bf0c      	ite	eq
 8001e54:	6032      	streq	r2, [r6, #0]
 8001e56:	605a      	strne	r2, [r3, #4]
 8001e58:	e7ec      	b.n	8001e34 <_malloc_r+0xa0>
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	6864      	ldr	r4, [r4, #4]
 8001e5e:	e7b2      	b.n	8001dc6 <_malloc_r+0x32>
 8001e60:	4634      	mov	r4, r6
 8001e62:	6876      	ldr	r6, [r6, #4]
 8001e64:	e7b9      	b.n	8001dda <_malloc_r+0x46>
 8001e66:	230c      	movs	r3, #12
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	f000 fd6a 	bl	8002944 <__malloc_unlock>
 8001e70:	e7a1      	b.n	8001db6 <_malloc_r+0x22>
 8001e72:	6025      	str	r5, [r4, #0]
 8001e74:	e7de      	b.n	8001e34 <_malloc_r+0xa0>
 8001e76:	bf00      	nop
 8001e78:	200000a0 	.word	0x200000a0

08001e7c <__sfputc_r>:
 8001e7c:	6893      	ldr	r3, [r2, #8]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	b410      	push	{r4}
 8001e84:	6093      	str	r3, [r2, #8]
 8001e86:	da08      	bge.n	8001e9a <__sfputc_r+0x1e>
 8001e88:	6994      	ldr	r4, [r2, #24]
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	db01      	blt.n	8001e92 <__sfputc_r+0x16>
 8001e8e:	290a      	cmp	r1, #10
 8001e90:	d103      	bne.n	8001e9a <__sfputc_r+0x1e>
 8001e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e96:	f000 bb33 	b.w	8002500 <__swbuf_r>
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	1c58      	adds	r0, r3, #1
 8001e9e:	6010      	str	r0, [r2, #0]
 8001ea0:	7019      	strb	r1, [r3, #0]
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <__sfputs_r>:
 8001eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eac:	4606      	mov	r6, r0
 8001eae:	460f      	mov	r7, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	18d5      	adds	r5, r2, r3
 8001eb4:	42ac      	cmp	r4, r5
 8001eb6:	d101      	bne.n	8001ebc <__sfputs_r+0x12>
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e007      	b.n	8001ecc <__sfputs_r+0x22>
 8001ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec0:	463a      	mov	r2, r7
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	f7ff ffda 	bl	8001e7c <__sfputc_r>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d1f3      	bne.n	8001eb4 <__sfputs_r+0xa>
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ed0 <_vfiprintf_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	460d      	mov	r5, r1
 8001ed6:	b09d      	sub	sp, #116	; 0x74
 8001ed8:	4614      	mov	r4, r2
 8001eda:	4698      	mov	r8, r3
 8001edc:	4606      	mov	r6, r0
 8001ede:	b118      	cbz	r0, 8001ee8 <_vfiprintf_r+0x18>
 8001ee0:	6983      	ldr	r3, [r0, #24]
 8001ee2:	b90b      	cbnz	r3, 8001ee8 <_vfiprintf_r+0x18>
 8001ee4:	f7ff fe96 	bl	8001c14 <__sinit>
 8001ee8:	4b89      	ldr	r3, [pc, #548]	; (8002110 <_vfiprintf_r+0x240>)
 8001eea:	429d      	cmp	r5, r3
 8001eec:	d11b      	bne.n	8001f26 <_vfiprintf_r+0x56>
 8001eee:	6875      	ldr	r5, [r6, #4]
 8001ef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ef2:	07d9      	lsls	r1, r3, #31
 8001ef4:	d405      	bmi.n	8001f02 <_vfiprintf_r+0x32>
 8001ef6:	89ab      	ldrh	r3, [r5, #12]
 8001ef8:	059a      	lsls	r2, r3, #22
 8001efa:	d402      	bmi.n	8001f02 <_vfiprintf_r+0x32>
 8001efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001efe:	f7ff ff27 	bl	8001d50 <__retarget_lock_acquire_recursive>
 8001f02:	89ab      	ldrh	r3, [r5, #12]
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	d501      	bpl.n	8001f0c <_vfiprintf_r+0x3c>
 8001f08:	692b      	ldr	r3, [r5, #16]
 8001f0a:	b9eb      	cbnz	r3, 8001f48 <_vfiprintf_r+0x78>
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f000 fb5a 	bl	80025c8 <__swsetup_r>
 8001f14:	b1c0      	cbz	r0, 8001f48 <_vfiprintf_r+0x78>
 8001f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f18:	07dc      	lsls	r4, r3, #31
 8001f1a:	d50e      	bpl.n	8001f3a <_vfiprintf_r+0x6a>
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	b01d      	add	sp, #116	; 0x74
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f26:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <_vfiprintf_r+0x244>)
 8001f28:	429d      	cmp	r5, r3
 8001f2a:	d101      	bne.n	8001f30 <_vfiprintf_r+0x60>
 8001f2c:	68b5      	ldr	r5, [r6, #8]
 8001f2e:	e7df      	b.n	8001ef0 <_vfiprintf_r+0x20>
 8001f30:	4b79      	ldr	r3, [pc, #484]	; (8002118 <_vfiprintf_r+0x248>)
 8001f32:	429d      	cmp	r5, r3
 8001f34:	bf08      	it	eq
 8001f36:	68f5      	ldreq	r5, [r6, #12]
 8001f38:	e7da      	b.n	8001ef0 <_vfiprintf_r+0x20>
 8001f3a:	89ab      	ldrh	r3, [r5, #12]
 8001f3c:	0598      	lsls	r0, r3, #22
 8001f3e:	d4ed      	bmi.n	8001f1c <_vfiprintf_r+0x4c>
 8001f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f42:	f7ff ff06 	bl	8001d52 <__retarget_lock_release_recursive>
 8001f46:	e7e9      	b.n	8001f1c <_vfiprintf_r+0x4c>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f56:	2330      	movs	r3, #48	; 0x30
 8001f58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800211c <_vfiprintf_r+0x24c>
 8001f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f60:	f04f 0901 	mov.w	r9, #1
 8001f64:	4623      	mov	r3, r4
 8001f66:	469a      	mov	sl, r3
 8001f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f6c:	b10a      	cbz	r2, 8001f72 <_vfiprintf_r+0xa2>
 8001f6e:	2a25      	cmp	r2, #37	; 0x25
 8001f70:	d1f9      	bne.n	8001f66 <_vfiprintf_r+0x96>
 8001f72:	ebba 0b04 	subs.w	fp, sl, r4
 8001f76:	d00b      	beq.n	8001f90 <_vfiprintf_r+0xc0>
 8001f78:	465b      	mov	r3, fp
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	4630      	mov	r0, r6
 8001f80:	f7ff ff93 	bl	8001eaa <__sfputs_r>
 8001f84:	3001      	adds	r0, #1
 8001f86:	f000 80aa 	beq.w	80020de <_vfiprintf_r+0x20e>
 8001f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f8c:	445a      	add	r2, fp
 8001f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f90:	f89a 3000 	ldrb.w	r3, [sl]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a2 	beq.w	80020de <_vfiprintf_r+0x20e>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fa4:	f10a 0a01 	add.w	sl, sl, #1
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	9307      	str	r3, [sp, #28]
 8001fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8001fb2:	4654      	mov	r4, sl
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fba:	4858      	ldr	r0, [pc, #352]	; (800211c <_vfiprintf_r+0x24c>)
 8001fbc:	f7fe f918 	bl	80001f0 <memchr>
 8001fc0:	9a04      	ldr	r2, [sp, #16]
 8001fc2:	b9d8      	cbnz	r0, 8001ffc <_vfiprintf_r+0x12c>
 8001fc4:	06d1      	lsls	r1, r2, #27
 8001fc6:	bf44      	itt	mi
 8001fc8:	2320      	movmi	r3, #32
 8001fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fce:	0713      	lsls	r3, r2, #28
 8001fd0:	bf44      	itt	mi
 8001fd2:	232b      	movmi	r3, #43	; 0x2b
 8001fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8001fde:	d015      	beq.n	800200c <_vfiprintf_r+0x13c>
 8001fe0:	9a07      	ldr	r2, [sp, #28]
 8001fe2:	4654      	mov	r4, sl
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f04f 0c0a 	mov.w	ip, #10
 8001fea:	4621      	mov	r1, r4
 8001fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ff0:	3b30      	subs	r3, #48	; 0x30
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d94e      	bls.n	8002094 <_vfiprintf_r+0x1c4>
 8001ff6:	b1b0      	cbz	r0, 8002026 <_vfiprintf_r+0x156>
 8001ff8:	9207      	str	r2, [sp, #28]
 8001ffa:	e014      	b.n	8002026 <_vfiprintf_r+0x156>
 8001ffc:	eba0 0308 	sub.w	r3, r0, r8
 8002000:	fa09 f303 	lsl.w	r3, r9, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	9304      	str	r3, [sp, #16]
 8002008:	46a2      	mov	sl, r4
 800200a:	e7d2      	b.n	8001fb2 <_vfiprintf_r+0xe2>
 800200c:	9b03      	ldr	r3, [sp, #12]
 800200e:	1d19      	adds	r1, r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	9103      	str	r1, [sp, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	bfbb      	ittet	lt
 8002018:	425b      	neglt	r3, r3
 800201a:	f042 0202 	orrlt.w	r2, r2, #2
 800201e:	9307      	strge	r3, [sp, #28]
 8002020:	9307      	strlt	r3, [sp, #28]
 8002022:	bfb8      	it	lt
 8002024:	9204      	strlt	r2, [sp, #16]
 8002026:	7823      	ldrb	r3, [r4, #0]
 8002028:	2b2e      	cmp	r3, #46	; 0x2e
 800202a:	d10c      	bne.n	8002046 <_vfiprintf_r+0x176>
 800202c:	7863      	ldrb	r3, [r4, #1]
 800202e:	2b2a      	cmp	r3, #42	; 0x2a
 8002030:	d135      	bne.n	800209e <_vfiprintf_r+0x1ce>
 8002032:	9b03      	ldr	r3, [sp, #12]
 8002034:	1d1a      	adds	r2, r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	9203      	str	r2, [sp, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bfb8      	it	lt
 800203e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002042:	3402      	adds	r4, #2
 8002044:	9305      	str	r3, [sp, #20]
 8002046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800212c <_vfiprintf_r+0x25c>
 800204a:	7821      	ldrb	r1, [r4, #0]
 800204c:	2203      	movs	r2, #3
 800204e:	4650      	mov	r0, sl
 8002050:	f7fe f8ce 	bl	80001f0 <memchr>
 8002054:	b140      	cbz	r0, 8002068 <_vfiprintf_r+0x198>
 8002056:	2340      	movs	r3, #64	; 0x40
 8002058:	eba0 000a 	sub.w	r0, r0, sl
 800205c:	fa03 f000 	lsl.w	r0, r3, r0
 8002060:	9b04      	ldr	r3, [sp, #16]
 8002062:	4303      	orrs	r3, r0
 8002064:	3401      	adds	r4, #1
 8002066:	9304      	str	r3, [sp, #16]
 8002068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800206c:	482c      	ldr	r0, [pc, #176]	; (8002120 <_vfiprintf_r+0x250>)
 800206e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002072:	2206      	movs	r2, #6
 8002074:	f7fe f8bc 	bl	80001f0 <memchr>
 8002078:	2800      	cmp	r0, #0
 800207a:	d03f      	beq.n	80020fc <_vfiprintf_r+0x22c>
 800207c:	4b29      	ldr	r3, [pc, #164]	; (8002124 <_vfiprintf_r+0x254>)
 800207e:	bb1b      	cbnz	r3, 80020c8 <_vfiprintf_r+0x1f8>
 8002080:	9b03      	ldr	r3, [sp, #12]
 8002082:	3307      	adds	r3, #7
 8002084:	f023 0307 	bic.w	r3, r3, #7
 8002088:	3308      	adds	r3, #8
 800208a:	9303      	str	r3, [sp, #12]
 800208c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800208e:	443b      	add	r3, r7
 8002090:	9309      	str	r3, [sp, #36]	; 0x24
 8002092:	e767      	b.n	8001f64 <_vfiprintf_r+0x94>
 8002094:	fb0c 3202 	mla	r2, ip, r2, r3
 8002098:	460c      	mov	r4, r1
 800209a:	2001      	movs	r0, #1
 800209c:	e7a5      	b.n	8001fea <_vfiprintf_r+0x11a>
 800209e:	2300      	movs	r3, #0
 80020a0:	3401      	adds	r4, #1
 80020a2:	9305      	str	r3, [sp, #20]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 0c0a 	mov.w	ip, #10
 80020aa:	4620      	mov	r0, r4
 80020ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020b0:	3a30      	subs	r2, #48	; 0x30
 80020b2:	2a09      	cmp	r2, #9
 80020b4:	d903      	bls.n	80020be <_vfiprintf_r+0x1ee>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0c5      	beq.n	8002046 <_vfiprintf_r+0x176>
 80020ba:	9105      	str	r1, [sp, #20]
 80020bc:	e7c3      	b.n	8002046 <_vfiprintf_r+0x176>
 80020be:	fb0c 2101 	mla	r1, ip, r1, r2
 80020c2:	4604      	mov	r4, r0
 80020c4:	2301      	movs	r3, #1
 80020c6:	e7f0      	b.n	80020aa <_vfiprintf_r+0x1da>
 80020c8:	ab03      	add	r3, sp, #12
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	462a      	mov	r2, r5
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <_vfiprintf_r+0x258>)
 80020d0:	a904      	add	r1, sp, #16
 80020d2:	4630      	mov	r0, r6
 80020d4:	f3af 8000 	nop.w
 80020d8:	4607      	mov	r7, r0
 80020da:	1c78      	adds	r0, r7, #1
 80020dc:	d1d6      	bne.n	800208c <_vfiprintf_r+0x1bc>
 80020de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020e0:	07d9      	lsls	r1, r3, #31
 80020e2:	d405      	bmi.n	80020f0 <_vfiprintf_r+0x220>
 80020e4:	89ab      	ldrh	r3, [r5, #12]
 80020e6:	059a      	lsls	r2, r3, #22
 80020e8:	d402      	bmi.n	80020f0 <_vfiprintf_r+0x220>
 80020ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020ec:	f7ff fe31 	bl	8001d52 <__retarget_lock_release_recursive>
 80020f0:	89ab      	ldrh	r3, [r5, #12]
 80020f2:	065b      	lsls	r3, r3, #25
 80020f4:	f53f af12 	bmi.w	8001f1c <_vfiprintf_r+0x4c>
 80020f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020fa:	e711      	b.n	8001f20 <_vfiprintf_r+0x50>
 80020fc:	ab03      	add	r3, sp, #12
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	462a      	mov	r2, r5
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <_vfiprintf_r+0x258>)
 8002104:	a904      	add	r1, sp, #16
 8002106:	4630      	mov	r0, r6
 8002108:	f000 f880 	bl	800220c <_printf_i>
 800210c:	e7e4      	b.n	80020d8 <_vfiprintf_r+0x208>
 800210e:	bf00      	nop
 8002110:	08002ab4 	.word	0x08002ab4
 8002114:	08002ad4 	.word	0x08002ad4
 8002118:	08002a94 	.word	0x08002a94
 800211c:	08002af4 	.word	0x08002af4
 8002120:	08002afe 	.word	0x08002afe
 8002124:	00000000 	.word	0x00000000
 8002128:	08001eab 	.word	0x08001eab
 800212c:	08002afa 	.word	0x08002afa

08002130 <_printf_common>:
 8002130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002134:	4616      	mov	r6, r2
 8002136:	4699      	mov	r9, r3
 8002138:	688a      	ldr	r2, [r1, #8]
 800213a:	690b      	ldr	r3, [r1, #16]
 800213c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002140:	4293      	cmp	r3, r2
 8002142:	bfb8      	it	lt
 8002144:	4613      	movlt	r3, r2
 8002146:	6033      	str	r3, [r6, #0]
 8002148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800214c:	4607      	mov	r7, r0
 800214e:	460c      	mov	r4, r1
 8002150:	b10a      	cbz	r2, 8002156 <_printf_common+0x26>
 8002152:	3301      	adds	r3, #1
 8002154:	6033      	str	r3, [r6, #0]
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	0699      	lsls	r1, r3, #26
 800215a:	bf42      	ittt	mi
 800215c:	6833      	ldrmi	r3, [r6, #0]
 800215e:	3302      	addmi	r3, #2
 8002160:	6033      	strmi	r3, [r6, #0]
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	f015 0506 	ands.w	r5, r5, #6
 8002168:	d106      	bne.n	8002178 <_printf_common+0x48>
 800216a:	f104 0a19 	add.w	sl, r4, #25
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	6832      	ldr	r2, [r6, #0]
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	42ab      	cmp	r3, r5
 8002176:	dc26      	bgt.n	80021c6 <_printf_common+0x96>
 8002178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800217c:	1e13      	subs	r3, r2, #0
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	bf18      	it	ne
 8002182:	2301      	movne	r3, #1
 8002184:	0692      	lsls	r2, r2, #26
 8002186:	d42b      	bmi.n	80021e0 <_printf_common+0xb0>
 8002188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800218c:	4649      	mov	r1, r9
 800218e:	4638      	mov	r0, r7
 8002190:	47c0      	blx	r8
 8002192:	3001      	adds	r0, #1
 8002194:	d01e      	beq.n	80021d4 <_printf_common+0xa4>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	68e5      	ldr	r5, [r4, #12]
 800219a:	6832      	ldr	r2, [r6, #0]
 800219c:	f003 0306 	and.w	r3, r3, #6
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	bf08      	it	eq
 80021a4:	1aad      	subeq	r5, r5, r2
 80021a6:	68a3      	ldr	r3, [r4, #8]
 80021a8:	6922      	ldr	r2, [r4, #16]
 80021aa:	bf0c      	ite	eq
 80021ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021b0:	2500      	movne	r5, #0
 80021b2:	4293      	cmp	r3, r2
 80021b4:	bfc4      	itt	gt
 80021b6:	1a9b      	subgt	r3, r3, r2
 80021b8:	18ed      	addgt	r5, r5, r3
 80021ba:	2600      	movs	r6, #0
 80021bc:	341a      	adds	r4, #26
 80021be:	42b5      	cmp	r5, r6
 80021c0:	d11a      	bne.n	80021f8 <_printf_common+0xc8>
 80021c2:	2000      	movs	r0, #0
 80021c4:	e008      	b.n	80021d8 <_printf_common+0xa8>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4652      	mov	r2, sl
 80021ca:	4649      	mov	r1, r9
 80021cc:	4638      	mov	r0, r7
 80021ce:	47c0      	blx	r8
 80021d0:	3001      	adds	r0, #1
 80021d2:	d103      	bne.n	80021dc <_printf_common+0xac>
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021dc:	3501      	adds	r5, #1
 80021de:	e7c6      	b.n	800216e <_printf_common+0x3e>
 80021e0:	18e1      	adds	r1, r4, r3
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	2030      	movs	r0, #48	; 0x30
 80021e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021ea:	4422      	add	r2, r4
 80021ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021f4:	3302      	adds	r3, #2
 80021f6:	e7c7      	b.n	8002188 <_printf_common+0x58>
 80021f8:	2301      	movs	r3, #1
 80021fa:	4622      	mov	r2, r4
 80021fc:	4649      	mov	r1, r9
 80021fe:	4638      	mov	r0, r7
 8002200:	47c0      	blx	r8
 8002202:	3001      	adds	r0, #1
 8002204:	d0e6      	beq.n	80021d4 <_printf_common+0xa4>
 8002206:	3601      	adds	r6, #1
 8002208:	e7d9      	b.n	80021be <_printf_common+0x8e>
	...

0800220c <_printf_i>:
 800220c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	7e0f      	ldrb	r7, [r1, #24]
 8002212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002214:	2f78      	cmp	r7, #120	; 0x78
 8002216:	4691      	mov	r9, r2
 8002218:	4680      	mov	r8, r0
 800221a:	460c      	mov	r4, r1
 800221c:	469a      	mov	sl, r3
 800221e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002222:	d807      	bhi.n	8002234 <_printf_i+0x28>
 8002224:	2f62      	cmp	r7, #98	; 0x62
 8002226:	d80a      	bhi.n	800223e <_printf_i+0x32>
 8002228:	2f00      	cmp	r7, #0
 800222a:	f000 80d8 	beq.w	80023de <_printf_i+0x1d2>
 800222e:	2f58      	cmp	r7, #88	; 0x58
 8002230:	f000 80a3 	beq.w	800237a <_printf_i+0x16e>
 8002234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800223c:	e03a      	b.n	80022b4 <_printf_i+0xa8>
 800223e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002242:	2b15      	cmp	r3, #21
 8002244:	d8f6      	bhi.n	8002234 <_printf_i+0x28>
 8002246:	a101      	add	r1, pc, #4	; (adr r1, 800224c <_printf_i+0x40>)
 8002248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800224c:	080022a5 	.word	0x080022a5
 8002250:	080022b9 	.word	0x080022b9
 8002254:	08002235 	.word	0x08002235
 8002258:	08002235 	.word	0x08002235
 800225c:	08002235 	.word	0x08002235
 8002260:	08002235 	.word	0x08002235
 8002264:	080022b9 	.word	0x080022b9
 8002268:	08002235 	.word	0x08002235
 800226c:	08002235 	.word	0x08002235
 8002270:	08002235 	.word	0x08002235
 8002274:	08002235 	.word	0x08002235
 8002278:	080023c5 	.word	0x080023c5
 800227c:	080022e9 	.word	0x080022e9
 8002280:	080023a7 	.word	0x080023a7
 8002284:	08002235 	.word	0x08002235
 8002288:	08002235 	.word	0x08002235
 800228c:	080023e7 	.word	0x080023e7
 8002290:	08002235 	.word	0x08002235
 8002294:	080022e9 	.word	0x080022e9
 8002298:	08002235 	.word	0x08002235
 800229c:	08002235 	.word	0x08002235
 80022a0:	080023af 	.word	0x080023af
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	1d1a      	adds	r2, r3, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	602a      	str	r2, [r5, #0]
 80022ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0a3      	b.n	8002400 <_printf_i+0x1f4>
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	6829      	ldr	r1, [r5, #0]
 80022bc:	0606      	lsls	r6, r0, #24
 80022be:	f101 0304 	add.w	r3, r1, #4
 80022c2:	d50a      	bpl.n	80022da <_printf_i+0xce>
 80022c4:	680e      	ldr	r6, [r1, #0]
 80022c6:	602b      	str	r3, [r5, #0]
 80022c8:	2e00      	cmp	r6, #0
 80022ca:	da03      	bge.n	80022d4 <_printf_i+0xc8>
 80022cc:	232d      	movs	r3, #45	; 0x2d
 80022ce:	4276      	negs	r6, r6
 80022d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d4:	485e      	ldr	r0, [pc, #376]	; (8002450 <_printf_i+0x244>)
 80022d6:	230a      	movs	r3, #10
 80022d8:	e019      	b.n	800230e <_printf_i+0x102>
 80022da:	680e      	ldr	r6, [r1, #0]
 80022dc:	602b      	str	r3, [r5, #0]
 80022de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022e2:	bf18      	it	ne
 80022e4:	b236      	sxthne	r6, r6
 80022e6:	e7ef      	b.n	80022c8 <_printf_i+0xbc>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	1d19      	adds	r1, r3, #4
 80022ee:	6029      	str	r1, [r5, #0]
 80022f0:	0601      	lsls	r1, r0, #24
 80022f2:	d501      	bpl.n	80022f8 <_printf_i+0xec>
 80022f4:	681e      	ldr	r6, [r3, #0]
 80022f6:	e002      	b.n	80022fe <_printf_i+0xf2>
 80022f8:	0646      	lsls	r6, r0, #25
 80022fa:	d5fb      	bpl.n	80022f4 <_printf_i+0xe8>
 80022fc:	881e      	ldrh	r6, [r3, #0]
 80022fe:	4854      	ldr	r0, [pc, #336]	; (8002450 <_printf_i+0x244>)
 8002300:	2f6f      	cmp	r7, #111	; 0x6f
 8002302:	bf0c      	ite	eq
 8002304:	2308      	moveq	r3, #8
 8002306:	230a      	movne	r3, #10
 8002308:	2100      	movs	r1, #0
 800230a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800230e:	6865      	ldr	r5, [r4, #4]
 8002310:	60a5      	str	r5, [r4, #8]
 8002312:	2d00      	cmp	r5, #0
 8002314:	bfa2      	ittt	ge
 8002316:	6821      	ldrge	r1, [r4, #0]
 8002318:	f021 0104 	bicge.w	r1, r1, #4
 800231c:	6021      	strge	r1, [r4, #0]
 800231e:	b90e      	cbnz	r6, 8002324 <_printf_i+0x118>
 8002320:	2d00      	cmp	r5, #0
 8002322:	d04d      	beq.n	80023c0 <_printf_i+0x1b4>
 8002324:	4615      	mov	r5, r2
 8002326:	fbb6 f1f3 	udiv	r1, r6, r3
 800232a:	fb03 6711 	mls	r7, r3, r1, r6
 800232e:	5dc7      	ldrb	r7, [r0, r7]
 8002330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002334:	4637      	mov	r7, r6
 8002336:	42bb      	cmp	r3, r7
 8002338:	460e      	mov	r6, r1
 800233a:	d9f4      	bls.n	8002326 <_printf_i+0x11a>
 800233c:	2b08      	cmp	r3, #8
 800233e:	d10b      	bne.n	8002358 <_printf_i+0x14c>
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	07de      	lsls	r6, r3, #31
 8002344:	d508      	bpl.n	8002358 <_printf_i+0x14c>
 8002346:	6923      	ldr	r3, [r4, #16]
 8002348:	6861      	ldr	r1, [r4, #4]
 800234a:	4299      	cmp	r1, r3
 800234c:	bfde      	ittt	le
 800234e:	2330      	movle	r3, #48	; 0x30
 8002350:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002354:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002358:	1b52      	subs	r2, r2, r5
 800235a:	6122      	str	r2, [r4, #16]
 800235c:	f8cd a000 	str.w	sl, [sp]
 8002360:	464b      	mov	r3, r9
 8002362:	aa03      	add	r2, sp, #12
 8002364:	4621      	mov	r1, r4
 8002366:	4640      	mov	r0, r8
 8002368:	f7ff fee2 	bl	8002130 <_printf_common>
 800236c:	3001      	adds	r0, #1
 800236e:	d14c      	bne.n	800240a <_printf_i+0x1fe>
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	b004      	add	sp, #16
 8002376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800237a:	4835      	ldr	r0, [pc, #212]	; (8002450 <_printf_i+0x244>)
 800237c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002380:	6829      	ldr	r1, [r5, #0]
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f851 6b04 	ldr.w	r6, [r1], #4
 8002388:	6029      	str	r1, [r5, #0]
 800238a:	061d      	lsls	r5, r3, #24
 800238c:	d514      	bpl.n	80023b8 <_printf_i+0x1ac>
 800238e:	07df      	lsls	r7, r3, #31
 8002390:	bf44      	itt	mi
 8002392:	f043 0320 	orrmi.w	r3, r3, #32
 8002396:	6023      	strmi	r3, [r4, #0]
 8002398:	b91e      	cbnz	r6, 80023a2 <_printf_i+0x196>
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f023 0320 	bic.w	r3, r3, #32
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	2310      	movs	r3, #16
 80023a4:	e7b0      	b.n	8002308 <_printf_i+0xfc>
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f043 0320 	orr.w	r3, r3, #32
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	2378      	movs	r3, #120	; 0x78
 80023b0:	4828      	ldr	r0, [pc, #160]	; (8002454 <_printf_i+0x248>)
 80023b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023b6:	e7e3      	b.n	8002380 <_printf_i+0x174>
 80023b8:	0659      	lsls	r1, r3, #25
 80023ba:	bf48      	it	mi
 80023bc:	b2b6      	uxthmi	r6, r6
 80023be:	e7e6      	b.n	800238e <_printf_i+0x182>
 80023c0:	4615      	mov	r5, r2
 80023c2:	e7bb      	b.n	800233c <_printf_i+0x130>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	6826      	ldr	r6, [r4, #0]
 80023c8:	6961      	ldr	r1, [r4, #20]
 80023ca:	1d18      	adds	r0, r3, #4
 80023cc:	6028      	str	r0, [r5, #0]
 80023ce:	0635      	lsls	r5, r6, #24
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	d501      	bpl.n	80023d8 <_printf_i+0x1cc>
 80023d4:	6019      	str	r1, [r3, #0]
 80023d6:	e002      	b.n	80023de <_printf_i+0x1d2>
 80023d8:	0670      	lsls	r0, r6, #25
 80023da:	d5fb      	bpl.n	80023d4 <_printf_i+0x1c8>
 80023dc:	8019      	strh	r1, [r3, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	6123      	str	r3, [r4, #16]
 80023e2:	4615      	mov	r5, r2
 80023e4:	e7ba      	b.n	800235c <_printf_i+0x150>
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	1d1a      	adds	r2, r3, #4
 80023ea:	602a      	str	r2, [r5, #0]
 80023ec:	681d      	ldr	r5, [r3, #0]
 80023ee:	6862      	ldr	r2, [r4, #4]
 80023f0:	2100      	movs	r1, #0
 80023f2:	4628      	mov	r0, r5
 80023f4:	f7fd fefc 	bl	80001f0 <memchr>
 80023f8:	b108      	cbz	r0, 80023fe <_printf_i+0x1f2>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	6060      	str	r0, [r4, #4]
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	6123      	str	r3, [r4, #16]
 8002402:	2300      	movs	r3, #0
 8002404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002408:	e7a8      	b.n	800235c <_printf_i+0x150>
 800240a:	6923      	ldr	r3, [r4, #16]
 800240c:	462a      	mov	r2, r5
 800240e:	4649      	mov	r1, r9
 8002410:	4640      	mov	r0, r8
 8002412:	47d0      	blx	sl
 8002414:	3001      	adds	r0, #1
 8002416:	d0ab      	beq.n	8002370 <_printf_i+0x164>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	079b      	lsls	r3, r3, #30
 800241c:	d413      	bmi.n	8002446 <_printf_i+0x23a>
 800241e:	68e0      	ldr	r0, [r4, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	4298      	cmp	r0, r3
 8002424:	bfb8      	it	lt
 8002426:	4618      	movlt	r0, r3
 8002428:	e7a4      	b.n	8002374 <_printf_i+0x168>
 800242a:	2301      	movs	r3, #1
 800242c:	4632      	mov	r2, r6
 800242e:	4649      	mov	r1, r9
 8002430:	4640      	mov	r0, r8
 8002432:	47d0      	blx	sl
 8002434:	3001      	adds	r0, #1
 8002436:	d09b      	beq.n	8002370 <_printf_i+0x164>
 8002438:	3501      	adds	r5, #1
 800243a:	68e3      	ldr	r3, [r4, #12]
 800243c:	9903      	ldr	r1, [sp, #12]
 800243e:	1a5b      	subs	r3, r3, r1
 8002440:	42ab      	cmp	r3, r5
 8002442:	dcf2      	bgt.n	800242a <_printf_i+0x21e>
 8002444:	e7eb      	b.n	800241e <_printf_i+0x212>
 8002446:	2500      	movs	r5, #0
 8002448:	f104 0619 	add.w	r6, r4, #25
 800244c:	e7f5      	b.n	800243a <_printf_i+0x22e>
 800244e:	bf00      	nop
 8002450:	08002b05 	.word	0x08002b05
 8002454:	08002b16 	.word	0x08002b16

08002458 <_sbrk_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4d06      	ldr	r5, [pc, #24]	; (8002474 <_sbrk_r+0x1c>)
 800245c:	2300      	movs	r3, #0
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	602b      	str	r3, [r5, #0]
 8002464:	f7fe faa6 	bl	80009b4 <_sbrk>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_sbrk_r+0x1a>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b103      	cbz	r3, 8002472 <_sbrk_r+0x1a>
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	200000a8 	.word	0x200000a8

08002478 <__sread>:
 8002478:	b510      	push	{r4, lr}
 800247a:	460c      	mov	r4, r1
 800247c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002480:	f000 fab2 	bl	80029e8 <_read_r>
 8002484:	2800      	cmp	r0, #0
 8002486:	bfab      	itete	ge
 8002488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800248a:	89a3      	ldrhlt	r3, [r4, #12]
 800248c:	181b      	addge	r3, r3, r0
 800248e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002492:	bfac      	ite	ge
 8002494:	6563      	strge	r3, [r4, #84]	; 0x54
 8002496:	81a3      	strhlt	r3, [r4, #12]
 8002498:	bd10      	pop	{r4, pc}

0800249a <__swrite>:
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	461f      	mov	r7, r3
 80024a0:	898b      	ldrh	r3, [r1, #12]
 80024a2:	05db      	lsls	r3, r3, #23
 80024a4:	4605      	mov	r5, r0
 80024a6:	460c      	mov	r4, r1
 80024a8:	4616      	mov	r6, r2
 80024aa:	d505      	bpl.n	80024b8 <__swrite+0x1e>
 80024ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b0:	2302      	movs	r3, #2
 80024b2:	2200      	movs	r2, #0
 80024b4:	f000 f9c8 	bl	8002848 <_lseek_r>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	4632      	mov	r2, r6
 80024c6:	463b      	mov	r3, r7
 80024c8:	4628      	mov	r0, r5
 80024ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024ce:	f000 b869 	b.w	80025a4 <_write_r>

080024d2 <__sseek>:
 80024d2:	b510      	push	{r4, lr}
 80024d4:	460c      	mov	r4, r1
 80024d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024da:	f000 f9b5 	bl	8002848 <_lseek_r>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	bf15      	itete	ne
 80024e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80024e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ee:	81a3      	strheq	r3, [r4, #12]
 80024f0:	bf18      	it	ne
 80024f2:	81a3      	strhne	r3, [r4, #12]
 80024f4:	bd10      	pop	{r4, pc}

080024f6 <__sclose>:
 80024f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024fa:	f000 b8d3 	b.w	80026a4 <_close_r>
	...

08002500 <__swbuf_r>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	460e      	mov	r6, r1
 8002504:	4614      	mov	r4, r2
 8002506:	4605      	mov	r5, r0
 8002508:	b118      	cbz	r0, 8002512 <__swbuf_r+0x12>
 800250a:	6983      	ldr	r3, [r0, #24]
 800250c:	b90b      	cbnz	r3, 8002512 <__swbuf_r+0x12>
 800250e:	f7ff fb81 	bl	8001c14 <__sinit>
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <__swbuf_r+0x98>)
 8002514:	429c      	cmp	r4, r3
 8002516:	d12b      	bne.n	8002570 <__swbuf_r+0x70>
 8002518:	686c      	ldr	r4, [r5, #4]
 800251a:	69a3      	ldr	r3, [r4, #24]
 800251c:	60a3      	str	r3, [r4, #8]
 800251e:	89a3      	ldrh	r3, [r4, #12]
 8002520:	071a      	lsls	r2, r3, #28
 8002522:	d52f      	bpl.n	8002584 <__swbuf_r+0x84>
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	b36b      	cbz	r3, 8002584 <__swbuf_r+0x84>
 8002528:	6923      	ldr	r3, [r4, #16]
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	1ac0      	subs	r0, r0, r3
 800252e:	6963      	ldr	r3, [r4, #20]
 8002530:	b2f6      	uxtb	r6, r6
 8002532:	4283      	cmp	r3, r0
 8002534:	4637      	mov	r7, r6
 8002536:	dc04      	bgt.n	8002542 <__swbuf_r+0x42>
 8002538:	4621      	mov	r1, r4
 800253a:	4628      	mov	r0, r5
 800253c:	f000 f948 	bl	80027d0 <_fflush_r>
 8002540:	bb30      	cbnz	r0, 8002590 <__swbuf_r+0x90>
 8002542:	68a3      	ldr	r3, [r4, #8]
 8002544:	3b01      	subs	r3, #1
 8002546:	60a3      	str	r3, [r4, #8]
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	6022      	str	r2, [r4, #0]
 800254e:	701e      	strb	r6, [r3, #0]
 8002550:	6963      	ldr	r3, [r4, #20]
 8002552:	3001      	adds	r0, #1
 8002554:	4283      	cmp	r3, r0
 8002556:	d004      	beq.n	8002562 <__swbuf_r+0x62>
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	07db      	lsls	r3, r3, #31
 800255c:	d506      	bpl.n	800256c <__swbuf_r+0x6c>
 800255e:	2e0a      	cmp	r6, #10
 8002560:	d104      	bne.n	800256c <__swbuf_r+0x6c>
 8002562:	4621      	mov	r1, r4
 8002564:	4628      	mov	r0, r5
 8002566:	f000 f933 	bl	80027d0 <_fflush_r>
 800256a:	b988      	cbnz	r0, 8002590 <__swbuf_r+0x90>
 800256c:	4638      	mov	r0, r7
 800256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <__swbuf_r+0x9c>)
 8002572:	429c      	cmp	r4, r3
 8002574:	d101      	bne.n	800257a <__swbuf_r+0x7a>
 8002576:	68ac      	ldr	r4, [r5, #8]
 8002578:	e7cf      	b.n	800251a <__swbuf_r+0x1a>
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <__swbuf_r+0xa0>)
 800257c:	429c      	cmp	r4, r3
 800257e:	bf08      	it	eq
 8002580:	68ec      	ldreq	r4, [r5, #12]
 8002582:	e7ca      	b.n	800251a <__swbuf_r+0x1a>
 8002584:	4621      	mov	r1, r4
 8002586:	4628      	mov	r0, r5
 8002588:	f000 f81e 	bl	80025c8 <__swsetup_r>
 800258c:	2800      	cmp	r0, #0
 800258e:	d0cb      	beq.n	8002528 <__swbuf_r+0x28>
 8002590:	f04f 37ff 	mov.w	r7, #4294967295
 8002594:	e7ea      	b.n	800256c <__swbuf_r+0x6c>
 8002596:	bf00      	nop
 8002598:	08002ab4 	.word	0x08002ab4
 800259c:	08002ad4 	.word	0x08002ad4
 80025a0:	08002a94 	.word	0x08002a94

080025a4 <_write_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4d07      	ldr	r5, [pc, #28]	; (80025c4 <_write_r+0x20>)
 80025a8:	4604      	mov	r4, r0
 80025aa:	4608      	mov	r0, r1
 80025ac:	4611      	mov	r1, r2
 80025ae:	2200      	movs	r2, #0
 80025b0:	602a      	str	r2, [r5, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7fe f815 	bl	80005e2 <_write>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	d102      	bne.n	80025c2 <_write_r+0x1e>
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	b103      	cbz	r3, 80025c2 <_write_r+0x1e>
 80025c0:	6023      	str	r3, [r4, #0]
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
 80025c4:	200000a8 	.word	0x200000a8

080025c8 <__swsetup_r>:
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <__swsetup_r+0xcc>)
 80025ca:	b570      	push	{r4, r5, r6, lr}
 80025cc:	681d      	ldr	r5, [r3, #0]
 80025ce:	4606      	mov	r6, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	b125      	cbz	r5, 80025de <__swsetup_r+0x16>
 80025d4:	69ab      	ldr	r3, [r5, #24]
 80025d6:	b913      	cbnz	r3, 80025de <__swsetup_r+0x16>
 80025d8:	4628      	mov	r0, r5
 80025da:	f7ff fb1b 	bl	8001c14 <__sinit>
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <__swsetup_r+0xd0>)
 80025e0:	429c      	cmp	r4, r3
 80025e2:	d10f      	bne.n	8002604 <__swsetup_r+0x3c>
 80025e4:	686c      	ldr	r4, [r5, #4]
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025ec:	0719      	lsls	r1, r3, #28
 80025ee:	d42c      	bmi.n	800264a <__swsetup_r+0x82>
 80025f0:	06dd      	lsls	r5, r3, #27
 80025f2:	d411      	bmi.n	8002618 <__swsetup_r+0x50>
 80025f4:	2309      	movs	r3, #9
 80025f6:	6033      	str	r3, [r6, #0]
 80025f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80025fc:	81a3      	strh	r3, [r4, #12]
 80025fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002602:	e03e      	b.n	8002682 <__swsetup_r+0xba>
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <__swsetup_r+0xd4>)
 8002606:	429c      	cmp	r4, r3
 8002608:	d101      	bne.n	800260e <__swsetup_r+0x46>
 800260a:	68ac      	ldr	r4, [r5, #8]
 800260c:	e7eb      	b.n	80025e6 <__swsetup_r+0x1e>
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <__swsetup_r+0xd8>)
 8002610:	429c      	cmp	r4, r3
 8002612:	bf08      	it	eq
 8002614:	68ec      	ldreq	r4, [r5, #12]
 8002616:	e7e6      	b.n	80025e6 <__swsetup_r+0x1e>
 8002618:	0758      	lsls	r0, r3, #29
 800261a:	d512      	bpl.n	8002642 <__swsetup_r+0x7a>
 800261c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800261e:	b141      	cbz	r1, 8002632 <__swsetup_r+0x6a>
 8002620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002624:	4299      	cmp	r1, r3
 8002626:	d002      	beq.n	800262e <__swsetup_r+0x66>
 8002628:	4630      	mov	r0, r6
 800262a:	f000 f991 	bl	8002950 <_free_r>
 800262e:	2300      	movs	r3, #0
 8002630:	6363      	str	r3, [r4, #52]	; 0x34
 8002632:	89a3      	ldrh	r3, [r4, #12]
 8002634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002638:	81a3      	strh	r3, [r4, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	6063      	str	r3, [r4, #4]
 800263e:	6923      	ldr	r3, [r4, #16]
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	81a3      	strh	r3, [r4, #12]
 800264a:	6923      	ldr	r3, [r4, #16]
 800264c:	b94b      	cbnz	r3, 8002662 <__swsetup_r+0x9a>
 800264e:	89a3      	ldrh	r3, [r4, #12]
 8002650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d003      	beq.n	8002662 <__swsetup_r+0x9a>
 800265a:	4621      	mov	r1, r4
 800265c:	4630      	mov	r0, r6
 800265e:	f000 f92b 	bl	80028b8 <__smakebuf_r>
 8002662:	89a0      	ldrh	r0, [r4, #12]
 8002664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002668:	f010 0301 	ands.w	r3, r0, #1
 800266c:	d00a      	beq.n	8002684 <__swsetup_r+0xbc>
 800266e:	2300      	movs	r3, #0
 8002670:	60a3      	str	r3, [r4, #8]
 8002672:	6963      	ldr	r3, [r4, #20]
 8002674:	425b      	negs	r3, r3
 8002676:	61a3      	str	r3, [r4, #24]
 8002678:	6923      	ldr	r3, [r4, #16]
 800267a:	b943      	cbnz	r3, 800268e <__swsetup_r+0xc6>
 800267c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002680:	d1ba      	bne.n	80025f8 <__swsetup_r+0x30>
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	0781      	lsls	r1, r0, #30
 8002686:	bf58      	it	pl
 8002688:	6963      	ldrpl	r3, [r4, #20]
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	e7f4      	b.n	8002678 <__swsetup_r+0xb0>
 800268e:	2000      	movs	r0, #0
 8002690:	e7f7      	b.n	8002682 <__swsetup_r+0xba>
 8002692:	bf00      	nop
 8002694:	2000000c 	.word	0x2000000c
 8002698:	08002ab4 	.word	0x08002ab4
 800269c:	08002ad4 	.word	0x08002ad4
 80026a0:	08002a94 	.word	0x08002a94

080026a4 <_close_r>:
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	4d06      	ldr	r5, [pc, #24]	; (80026c0 <_close_r+0x1c>)
 80026a8:	2300      	movs	r3, #0
 80026aa:	4604      	mov	r4, r0
 80026ac:	4608      	mov	r0, r1
 80026ae:	602b      	str	r3, [r5, #0]
 80026b0:	f7fe f94c 	bl	800094c <_close>
 80026b4:	1c43      	adds	r3, r0, #1
 80026b6:	d102      	bne.n	80026be <_close_r+0x1a>
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	b103      	cbz	r3, 80026be <_close_r+0x1a>
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	bd38      	pop	{r3, r4, r5, pc}
 80026c0:	200000a8 	.word	0x200000a8

080026c4 <__sflush_r>:
 80026c4:	898a      	ldrh	r2, [r1, #12]
 80026c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ca:	4605      	mov	r5, r0
 80026cc:	0710      	lsls	r0, r2, #28
 80026ce:	460c      	mov	r4, r1
 80026d0:	d458      	bmi.n	8002784 <__sflush_r+0xc0>
 80026d2:	684b      	ldr	r3, [r1, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dc05      	bgt.n	80026e4 <__sflush_r+0x20>
 80026d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	dc02      	bgt.n	80026e4 <__sflush_r+0x20>
 80026de:	2000      	movs	r0, #0
 80026e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026e6:	2e00      	cmp	r6, #0
 80026e8:	d0f9      	beq.n	80026de <__sflush_r+0x1a>
 80026ea:	2300      	movs	r3, #0
 80026ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026f0:	682f      	ldr	r7, [r5, #0]
 80026f2:	602b      	str	r3, [r5, #0]
 80026f4:	d032      	beq.n	800275c <__sflush_r+0x98>
 80026f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	075a      	lsls	r2, r3, #29
 80026fc:	d505      	bpl.n	800270a <__sflush_r+0x46>
 80026fe:	6863      	ldr	r3, [r4, #4]
 8002700:	1ac0      	subs	r0, r0, r3
 8002702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002704:	b10b      	cbz	r3, 800270a <__sflush_r+0x46>
 8002706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002708:	1ac0      	subs	r0, r0, r3
 800270a:	2300      	movs	r3, #0
 800270c:	4602      	mov	r2, r0
 800270e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002710:	6a21      	ldr	r1, [r4, #32]
 8002712:	4628      	mov	r0, r5
 8002714:	47b0      	blx	r6
 8002716:	1c43      	adds	r3, r0, #1
 8002718:	89a3      	ldrh	r3, [r4, #12]
 800271a:	d106      	bne.n	800272a <__sflush_r+0x66>
 800271c:	6829      	ldr	r1, [r5, #0]
 800271e:	291d      	cmp	r1, #29
 8002720:	d82c      	bhi.n	800277c <__sflush_r+0xb8>
 8002722:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <__sflush_r+0x108>)
 8002724:	40ca      	lsrs	r2, r1
 8002726:	07d6      	lsls	r6, r2, #31
 8002728:	d528      	bpl.n	800277c <__sflush_r+0xb8>
 800272a:	2200      	movs	r2, #0
 800272c:	6062      	str	r2, [r4, #4]
 800272e:	04d9      	lsls	r1, r3, #19
 8002730:	6922      	ldr	r2, [r4, #16]
 8002732:	6022      	str	r2, [r4, #0]
 8002734:	d504      	bpl.n	8002740 <__sflush_r+0x7c>
 8002736:	1c42      	adds	r2, r0, #1
 8002738:	d101      	bne.n	800273e <__sflush_r+0x7a>
 800273a:	682b      	ldr	r3, [r5, #0]
 800273c:	b903      	cbnz	r3, 8002740 <__sflush_r+0x7c>
 800273e:	6560      	str	r0, [r4, #84]	; 0x54
 8002740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002742:	602f      	str	r7, [r5, #0]
 8002744:	2900      	cmp	r1, #0
 8002746:	d0ca      	beq.n	80026de <__sflush_r+0x1a>
 8002748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800274c:	4299      	cmp	r1, r3
 800274e:	d002      	beq.n	8002756 <__sflush_r+0x92>
 8002750:	4628      	mov	r0, r5
 8002752:	f000 f8fd 	bl	8002950 <_free_r>
 8002756:	2000      	movs	r0, #0
 8002758:	6360      	str	r0, [r4, #52]	; 0x34
 800275a:	e7c1      	b.n	80026e0 <__sflush_r+0x1c>
 800275c:	6a21      	ldr	r1, [r4, #32]
 800275e:	2301      	movs	r3, #1
 8002760:	4628      	mov	r0, r5
 8002762:	47b0      	blx	r6
 8002764:	1c41      	adds	r1, r0, #1
 8002766:	d1c7      	bne.n	80026f8 <__sflush_r+0x34>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0c4      	beq.n	80026f8 <__sflush_r+0x34>
 800276e:	2b1d      	cmp	r3, #29
 8002770:	d001      	beq.n	8002776 <__sflush_r+0xb2>
 8002772:	2b16      	cmp	r3, #22
 8002774:	d101      	bne.n	800277a <__sflush_r+0xb6>
 8002776:	602f      	str	r7, [r5, #0]
 8002778:	e7b1      	b.n	80026de <__sflush_r+0x1a>
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002780:	81a3      	strh	r3, [r4, #12]
 8002782:	e7ad      	b.n	80026e0 <__sflush_r+0x1c>
 8002784:	690f      	ldr	r7, [r1, #16]
 8002786:	2f00      	cmp	r7, #0
 8002788:	d0a9      	beq.n	80026de <__sflush_r+0x1a>
 800278a:	0793      	lsls	r3, r2, #30
 800278c:	680e      	ldr	r6, [r1, #0]
 800278e:	bf08      	it	eq
 8002790:	694b      	ldreq	r3, [r1, #20]
 8002792:	600f      	str	r7, [r1, #0]
 8002794:	bf18      	it	ne
 8002796:	2300      	movne	r3, #0
 8002798:	eba6 0807 	sub.w	r8, r6, r7
 800279c:	608b      	str	r3, [r1, #8]
 800279e:	f1b8 0f00 	cmp.w	r8, #0
 80027a2:	dd9c      	ble.n	80026de <__sflush_r+0x1a>
 80027a4:	6a21      	ldr	r1, [r4, #32]
 80027a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027a8:	4643      	mov	r3, r8
 80027aa:	463a      	mov	r2, r7
 80027ac:	4628      	mov	r0, r5
 80027ae:	47b0      	blx	r6
 80027b0:	2800      	cmp	r0, #0
 80027b2:	dc06      	bgt.n	80027c2 <__sflush_r+0xfe>
 80027b4:	89a3      	ldrh	r3, [r4, #12]
 80027b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ba:	81a3      	strh	r3, [r4, #12]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	e78e      	b.n	80026e0 <__sflush_r+0x1c>
 80027c2:	4407      	add	r7, r0
 80027c4:	eba8 0800 	sub.w	r8, r8, r0
 80027c8:	e7e9      	b.n	800279e <__sflush_r+0xda>
 80027ca:	bf00      	nop
 80027cc:	20400001 	.word	0x20400001

080027d0 <_fflush_r>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	690b      	ldr	r3, [r1, #16]
 80027d4:	4605      	mov	r5, r0
 80027d6:	460c      	mov	r4, r1
 80027d8:	b913      	cbnz	r3, 80027e0 <_fflush_r+0x10>
 80027da:	2500      	movs	r5, #0
 80027dc:	4628      	mov	r0, r5
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	b118      	cbz	r0, 80027ea <_fflush_r+0x1a>
 80027e2:	6983      	ldr	r3, [r0, #24]
 80027e4:	b90b      	cbnz	r3, 80027ea <_fflush_r+0x1a>
 80027e6:	f7ff fa15 	bl	8001c14 <__sinit>
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <_fflush_r+0x6c>)
 80027ec:	429c      	cmp	r4, r3
 80027ee:	d11b      	bne.n	8002828 <_fflush_r+0x58>
 80027f0:	686c      	ldr	r4, [r5, #4]
 80027f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <_fflush_r+0xa>
 80027fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027fc:	07d0      	lsls	r0, r2, #31
 80027fe:	d404      	bmi.n	800280a <_fflush_r+0x3a>
 8002800:	0599      	lsls	r1, r3, #22
 8002802:	d402      	bmi.n	800280a <_fflush_r+0x3a>
 8002804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002806:	f7ff faa3 	bl	8001d50 <__retarget_lock_acquire_recursive>
 800280a:	4628      	mov	r0, r5
 800280c:	4621      	mov	r1, r4
 800280e:	f7ff ff59 	bl	80026c4 <__sflush_r>
 8002812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002814:	07da      	lsls	r2, r3, #31
 8002816:	4605      	mov	r5, r0
 8002818:	d4e0      	bmi.n	80027dc <_fflush_r+0xc>
 800281a:	89a3      	ldrh	r3, [r4, #12]
 800281c:	059b      	lsls	r3, r3, #22
 800281e:	d4dd      	bmi.n	80027dc <_fflush_r+0xc>
 8002820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002822:	f7ff fa96 	bl	8001d52 <__retarget_lock_release_recursive>
 8002826:	e7d9      	b.n	80027dc <_fflush_r+0xc>
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <_fflush_r+0x70>)
 800282a:	429c      	cmp	r4, r3
 800282c:	d101      	bne.n	8002832 <_fflush_r+0x62>
 800282e:	68ac      	ldr	r4, [r5, #8]
 8002830:	e7df      	b.n	80027f2 <_fflush_r+0x22>
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <_fflush_r+0x74>)
 8002834:	429c      	cmp	r4, r3
 8002836:	bf08      	it	eq
 8002838:	68ec      	ldreq	r4, [r5, #12]
 800283a:	e7da      	b.n	80027f2 <_fflush_r+0x22>
 800283c:	08002ab4 	.word	0x08002ab4
 8002840:	08002ad4 	.word	0x08002ad4
 8002844:	08002a94 	.word	0x08002a94

08002848 <_lseek_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4d07      	ldr	r5, [pc, #28]	; (8002868 <_lseek_r+0x20>)
 800284c:	4604      	mov	r4, r0
 800284e:	4608      	mov	r0, r1
 8002850:	4611      	mov	r1, r2
 8002852:	2200      	movs	r2, #0
 8002854:	602a      	str	r2, [r5, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	f7fe f89f 	bl	800099a <_lseek>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_lseek_r+0x1e>
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	b103      	cbz	r3, 8002866 <_lseek_r+0x1e>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	200000a8 	.word	0x200000a8

0800286c <__swhatbuf_r>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	460e      	mov	r6, r1
 8002870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002874:	2900      	cmp	r1, #0
 8002876:	b096      	sub	sp, #88	; 0x58
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	da08      	bge.n	8002890 <__swhatbuf_r+0x24>
 800287e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	602a      	str	r2, [r5, #0]
 8002886:	061a      	lsls	r2, r3, #24
 8002888:	d410      	bmi.n	80028ac <__swhatbuf_r+0x40>
 800288a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288e:	e00e      	b.n	80028ae <__swhatbuf_r+0x42>
 8002890:	466a      	mov	r2, sp
 8002892:	f000 f8bb 	bl	8002a0c <_fstat_r>
 8002896:	2800      	cmp	r0, #0
 8002898:	dbf1      	blt.n	800287e <__swhatbuf_r+0x12>
 800289a:	9a01      	ldr	r2, [sp, #4]
 800289c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028a4:	425a      	negs	r2, r3
 80028a6:	415a      	adcs	r2, r3
 80028a8:	602a      	str	r2, [r5, #0]
 80028aa:	e7ee      	b.n	800288a <__swhatbuf_r+0x1e>
 80028ac:	2340      	movs	r3, #64	; 0x40
 80028ae:	2000      	movs	r0, #0
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	b016      	add	sp, #88	; 0x58
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080028b8 <__smakebuf_r>:
 80028b8:	898b      	ldrh	r3, [r1, #12]
 80028ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028bc:	079d      	lsls	r5, r3, #30
 80028be:	4606      	mov	r6, r0
 80028c0:	460c      	mov	r4, r1
 80028c2:	d507      	bpl.n	80028d4 <__smakebuf_r+0x1c>
 80028c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028c8:	6023      	str	r3, [r4, #0]
 80028ca:	6123      	str	r3, [r4, #16]
 80028cc:	2301      	movs	r3, #1
 80028ce:	6163      	str	r3, [r4, #20]
 80028d0:	b002      	add	sp, #8
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	ab01      	add	r3, sp, #4
 80028d6:	466a      	mov	r2, sp
 80028d8:	f7ff ffc8 	bl	800286c <__swhatbuf_r>
 80028dc:	9900      	ldr	r1, [sp, #0]
 80028de:	4605      	mov	r5, r0
 80028e0:	4630      	mov	r0, r6
 80028e2:	f7ff fa57 	bl	8001d94 <_malloc_r>
 80028e6:	b948      	cbnz	r0, 80028fc <__smakebuf_r+0x44>
 80028e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ec:	059a      	lsls	r2, r3, #22
 80028ee:	d4ef      	bmi.n	80028d0 <__smakebuf_r+0x18>
 80028f0:	f023 0303 	bic.w	r3, r3, #3
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	81a3      	strh	r3, [r4, #12]
 80028fa:	e7e3      	b.n	80028c4 <__smakebuf_r+0xc>
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <__smakebuf_r+0x7c>)
 80028fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	6020      	str	r0, [r4, #0]
 8002904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002908:	81a3      	strh	r3, [r4, #12]
 800290a:	9b00      	ldr	r3, [sp, #0]
 800290c:	6163      	str	r3, [r4, #20]
 800290e:	9b01      	ldr	r3, [sp, #4]
 8002910:	6120      	str	r0, [r4, #16]
 8002912:	b15b      	cbz	r3, 800292c <__smakebuf_r+0x74>
 8002914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002918:	4630      	mov	r0, r6
 800291a:	f000 f889 	bl	8002a30 <_isatty_r>
 800291e:	b128      	cbz	r0, 800292c <__smakebuf_r+0x74>
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	81a3      	strh	r3, [r4, #12]
 800292c:	89a0      	ldrh	r0, [r4, #12]
 800292e:	4305      	orrs	r5, r0
 8002930:	81a5      	strh	r5, [r4, #12]
 8002932:	e7cd      	b.n	80028d0 <__smakebuf_r+0x18>
 8002934:	08001bad 	.word	0x08001bad

08002938 <__malloc_lock>:
 8002938:	4801      	ldr	r0, [pc, #4]	; (8002940 <__malloc_lock+0x8>)
 800293a:	f7ff ba09 	b.w	8001d50 <__retarget_lock_acquire_recursive>
 800293e:	bf00      	nop
 8002940:	2000009c 	.word	0x2000009c

08002944 <__malloc_unlock>:
 8002944:	4801      	ldr	r0, [pc, #4]	; (800294c <__malloc_unlock+0x8>)
 8002946:	f7ff ba04 	b.w	8001d52 <__retarget_lock_release_recursive>
 800294a:	bf00      	nop
 800294c:	2000009c 	.word	0x2000009c

08002950 <_free_r>:
 8002950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002952:	2900      	cmp	r1, #0
 8002954:	d044      	beq.n	80029e0 <_free_r+0x90>
 8002956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800295a:	9001      	str	r0, [sp, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f1a1 0404 	sub.w	r4, r1, #4
 8002962:	bfb8      	it	lt
 8002964:	18e4      	addlt	r4, r4, r3
 8002966:	f7ff ffe7 	bl	8002938 <__malloc_lock>
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <_free_r+0x94>)
 800296c:	9801      	ldr	r0, [sp, #4]
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	b933      	cbnz	r3, 8002980 <_free_r+0x30>
 8002972:	6063      	str	r3, [r4, #4]
 8002974:	6014      	str	r4, [r2, #0]
 8002976:	b003      	add	sp, #12
 8002978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800297c:	f7ff bfe2 	b.w	8002944 <__malloc_unlock>
 8002980:	42a3      	cmp	r3, r4
 8002982:	d908      	bls.n	8002996 <_free_r+0x46>
 8002984:	6825      	ldr	r5, [r4, #0]
 8002986:	1961      	adds	r1, r4, r5
 8002988:	428b      	cmp	r3, r1
 800298a:	bf01      	itttt	eq
 800298c:	6819      	ldreq	r1, [r3, #0]
 800298e:	685b      	ldreq	r3, [r3, #4]
 8002990:	1949      	addeq	r1, r1, r5
 8002992:	6021      	streq	r1, [r4, #0]
 8002994:	e7ed      	b.n	8002972 <_free_r+0x22>
 8002996:	461a      	mov	r2, r3
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	b10b      	cbz	r3, 80029a0 <_free_r+0x50>
 800299c:	42a3      	cmp	r3, r4
 800299e:	d9fa      	bls.n	8002996 <_free_r+0x46>
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	1855      	adds	r5, r2, r1
 80029a4:	42a5      	cmp	r5, r4
 80029a6:	d10b      	bne.n	80029c0 <_free_r+0x70>
 80029a8:	6824      	ldr	r4, [r4, #0]
 80029aa:	4421      	add	r1, r4
 80029ac:	1854      	adds	r4, r2, r1
 80029ae:	42a3      	cmp	r3, r4
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	d1e0      	bne.n	8002976 <_free_r+0x26>
 80029b4:	681c      	ldr	r4, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	6053      	str	r3, [r2, #4]
 80029ba:	4421      	add	r1, r4
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	e7da      	b.n	8002976 <_free_r+0x26>
 80029c0:	d902      	bls.n	80029c8 <_free_r+0x78>
 80029c2:	230c      	movs	r3, #12
 80029c4:	6003      	str	r3, [r0, #0]
 80029c6:	e7d6      	b.n	8002976 <_free_r+0x26>
 80029c8:	6825      	ldr	r5, [r4, #0]
 80029ca:	1961      	adds	r1, r4, r5
 80029cc:	428b      	cmp	r3, r1
 80029ce:	bf04      	itt	eq
 80029d0:	6819      	ldreq	r1, [r3, #0]
 80029d2:	685b      	ldreq	r3, [r3, #4]
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	bf04      	itt	eq
 80029d8:	1949      	addeq	r1, r1, r5
 80029da:	6021      	streq	r1, [r4, #0]
 80029dc:	6054      	str	r4, [r2, #4]
 80029de:	e7ca      	b.n	8002976 <_free_r+0x26>
 80029e0:	b003      	add	sp, #12
 80029e2:	bd30      	pop	{r4, r5, pc}
 80029e4:	200000a0 	.word	0x200000a0

080029e8 <_read_r>:
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4d07      	ldr	r5, [pc, #28]	; (8002a08 <_read_r+0x20>)
 80029ec:	4604      	mov	r4, r0
 80029ee:	4608      	mov	r0, r1
 80029f0:	4611      	mov	r1, r2
 80029f2:	2200      	movs	r2, #0
 80029f4:	602a      	str	r2, [r5, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f7fd ff8b 	bl	8000912 <_read>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d102      	bne.n	8002a06 <_read_r+0x1e>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	b103      	cbz	r3, 8002a06 <_read_r+0x1e>
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	200000a8 	.word	0x200000a8

08002a0c <_fstat_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4d07      	ldr	r5, [pc, #28]	; (8002a2c <_fstat_r+0x20>)
 8002a10:	2300      	movs	r3, #0
 8002a12:	4604      	mov	r4, r0
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	602b      	str	r3, [r5, #0]
 8002a1a:	f7fd ffa3 	bl	8000964 <_fstat>
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	d102      	bne.n	8002a28 <_fstat_r+0x1c>
 8002a22:	682b      	ldr	r3, [r5, #0]
 8002a24:	b103      	cbz	r3, 8002a28 <_fstat_r+0x1c>
 8002a26:	6023      	str	r3, [r4, #0]
 8002a28:	bd38      	pop	{r3, r4, r5, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200000a8 	.word	0x200000a8

08002a30 <_isatty_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4d06      	ldr	r5, [pc, #24]	; (8002a4c <_isatty_r+0x1c>)
 8002a34:	2300      	movs	r3, #0
 8002a36:	4604      	mov	r4, r0
 8002a38:	4608      	mov	r0, r1
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	f7fd ffa2 	bl	8000984 <_isatty>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <_isatty_r+0x1a>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b103      	cbz	r3, 8002a4a <_isatty_r+0x1a>
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	200000a8 	.word	0x200000a8

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr
